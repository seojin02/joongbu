<?
header('Content-Type: text/html; charset=UTF-8');
?>
<pre>
--PIO REST API Manipulation--
http://predictionio.apache.org/datacollection/eventmodel/ 이벤트 생성 여러 케이스
http://predictionio.apache.org/datacollection/eventapi/ 참고링크 (조작)

데이터 조회는 Get & url 조회로 가능하나
데이터 생성(이벤트 생성)은 Post로 해야함

Creating Your First Event
$ curl -i -X POST http://localhost:7070/events.json?accessKey=WPgcXKd42FPQpZHVbVeMyqF4CQJUnXQmIMTHhX3ZUrSzvy1KXJjdFUrslifa9rnB \
-H "Content-Type: application/json" \
-d '{
  "event" : "my_event",
  "entityType" : "user",
  "entityId" : "uid",
  "properties" : {
    "prop1" : 1,
    "prop2" : "value2",
    "prop3" : [1, 2, 3],
    "prop4" : true,
    "prop5" : ["a", "b", "c"],
    "prop6" : 4.56
  }
  "eventTime" : "2004-12-13T21:39:45.618-07:00"
}'

The following special events are reserved for updating entities and their properties:
* "$set" event: Set properties of an entity (also implicitly create the entity). To change properties of entity, you simply set the corresponding properties with value again. 
               The $set events should be created only when: The entity is first created (or re-create after $delete event), or
							 Set the entity's existing or new properties to new values (For example, user updates his email, user adds a phone number, item has a updated categories)
* "$unset" event: Unset properties of an entity. It means treating the specified properties as not existing anymore. Note that the field properties cannot be empty for $unset event.
* "$delete" event: delete the entity.

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

$accessKey = array('accessKey'=>'ibWRlqjmIuu7pWykNQSQnXRtEtQI63OkvqE8gjoN09YR3ovXTh5xTnql-0qTzPrt'

Using Event API
URL: http://localhost:7070/events.json?accessKey=yourAccessKeyString
->URL: http://192.168.56.1:7070/events.json?accessKey=ibWRlqjmIuu7pWykNQSQnXRtEtQI63OkvqE8gjoN09YR3ovXTh5xTnql-0qTzPrt

Query parameters:
*accessKey(String) : The Access Key for your App

(The event creation support many commonly used data. POST request body:)
*event(String) : Name of the event.
		(Examples: "sign-up", "rate", "view", "buy").
		Note: All event names start with "$" and "pio_" are reserved

*entityType(String) : The entity type. It is the namespace of the entityId and analogous to the table name of a relational database. 
		    The entityId must be unique within same entityType.
		    Note: All entityType names start with "$" and "pio_" are reserved and shouldn't be used.

*entityId(String) : The entity ID. entityType-entityId becomes the unique identifier of the entity. 
		    For example, you may have entityType named user, and different entity IDs, say 1 and 2. 
		    In this case, user-1 and user-2 uniquely identifies entities.

*targetEntityType(String) : (Optional) The target entity type.
			   Note: All entityType names start with "$" and "pio_" are reserved and shouldn't be used.

*targetEntityId(String) : (Optional) The target entity ID.

*properties(JSON) : (Optional) See Note About Properties below
		    Note: All property names start with "$" and "pio_" are reserved and shouldn't be used as keys inside properties.

*eventTime(String) : (Optional) The time of the event. Although Event Server's current system time and UTC timezone will be used if this is unspecified, it is highly recommended that this time should be generated by the client application in order to accurately record the time of the event.
		    Must be in ISO 8601 format (e.g.2004-12-13T21:39:45.618Z, or 2014-09-09T16:17:42.937-08:00).

Get an Event
$ curl -i -X GET http://localhost:7070/events/<your_eventId>.json?accessKey=<your_accessKey>

Delete an Event
$ curl -i -X DELETE http://localhost:7070/events/<your_eventId>.json?accessKey=<your_accessKey>

Get Events of an App
$ curl -i -X GET http://localhost:7070/events.json?accessKey=<your_accessKey>

(By default, it returns at most 20 events. Use the limit parameter to specify how many events returned (see below). Use cautiously!)
In addition, the following optional parameters are supported:
*startTime: time in ISO8601 format. Return events with eventTime >= startTime.
*untilTime: time in ISO8601 format. Return events with eventTime < untilTime.
*entityType: String. The entityType. Return events for this entityType only.
*entityId: String. The entityId. Return events for this entityId only.
*event: String. The event name. Return events with this name only.
*targetEntityType: String. The targetEntityType. Return events for this targetEntityType only.
*targetEntityId: String. The targetEntityId. Return events for this targetEntityId only.
*limit: Integer. The number of record events returned. Default is 20. -1 to get all.
*reversed: Boolean. Must be used with both entityType and entityId specified, returns events in reversed chronological order. Default is false.

exam:
$ curl -i -X GET "http://localhost:7070/events.json?accessKey=<your_accessKey>&startTime=<time in ISO8601 format>"
$ curl -i -X GET "http://localhost:7070/events.json?accessKey=<your_accessKey>&untilTime=<time in ISO8601 format>"
$ curl -i -X GET "http://localhost:7070/events.json?accessKey=<your_accessKey>&startTime=<time in ISO8601 format>&untilTime=<time in ISO8601 format>"
$ curl -i -X GET "http://localhost:7070/events.json?accessKey=<your_accessKey>&entityType=<your_entityType>&entityId=<your_entityId>&untilTime=<time in ISO801 format>"
->http://192.168.56.1:7070/events.json?accessKey=ibWRlqjmIuu7pWykNQSQnXRtEtQI63OkvqE8gjoN09YR3ovXTh5xTnql-0qTzPrt&limit=30
//기본 값읍 30인데 모든 데이터 읽어 오기
http://192.168.56.1:7070/events.json?accessKey=ibWRlqjmIuu7pWykNQSQnXRtEtQI63OkvqE8gjoN09YR3ovXTh5xTnql-0qTzPrt&limit=-1&event=$set&entityType=user

Delete All Events of an App
$ pio app data-delete --your_app_name--
$ pio-docker app data-delete --your_app_name--

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

</pre>

<pre>
--7070 event server--
	require_once 'dbconn.php';
	$eventServerUrl = 'http://745e8a4d.ngrok.io/events.json';
	$accessKey = array('accessKey'=>'ibWRlqjmIuu7pWykNQSQnXRtEtQI63OkvqE8gjoN09YR3ovXTh5xTnql-0qTzPrt');

	function setUser($url, $key, $fields)
	{
		$url = $url.'?'.http_build_query($key, '', '&');
	 
		$ch = curl_init(); //핸들러 초기화
		curl_setopt($ch, CURLOPT_URL, $url); //URL 지정
		curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); //필수
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); //결과값을 return하게 되어 변수에 저장 가능
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10); 
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $fields); //POST로 보낼 데이터 지정하기
		curl_setopt($ch, CURLOPT_POST, true); //0이 default 값이며 POST 통신을 위해 1로 설정
		$response = curl_exec($ch);
		curl_close ($ch);
		return $response;
	}

	if(isset($_POST['name']) && trim($_POST['name']) != ""){
		$nameInput = $_POST['name'];
	}else{
		echo '<script>//alert("이름을 입력해주세요");</script>';
		echo '<script>//history.back();</script>';
		exit;
	}

	if(isset($nameInput)){
	$conn = new DBC; 
	$conn->DBI(); 

	try{
		/*웹 서버 DB에 입력*/
		$query = "INSERT INTO pioUserT(name) 
						  VALUES (:name);";
		$conn->DBQ($query);
		$conn->result->bindParam(':name', $name); 
		$name = $nameInput;
		$conn->DBE();

		/*idx 1. 이벤트 서버 코드 2. 작업 완료 여부*/
		$LastId = $conn->LastId();
		
		if(isset($LastId)){
			/*이벤트 서버에 입력*/
			$entityId = 'u'.$LastId;
			$eventTime = date("c");
			//$accessKey = array('accessKey'=>'qUdgp9kyeG-uT2kl7BTl4H3iI68vWLQSkH3SAIti_6jPr_LyrJBGYoHeTLO0jAr2');
			$setData = array(  
								'event' => '$set',
								'entityType' => 'user',
								'entityId' => $entityId,
								'eventTime' => $eventTime
							);

			$setDataJson = json_encode($setData);

			$result = setUser($eventServerUrl, $accessKey, $setDataJson);

			$resultJson = json_decode($result);

			$eventId = $resultJson->eventId;
			$message = $resultJson->message; //에러 메시지(트랜잭션 적용 경우 에러 메시지 뜨면 rollback 후 다시 입력해야됨)

			/*이벤트아이디 처리*/
			$query = "UPDATE pioUserT
								SET eventId = :eventId
								WHERE idx = $LastId";
			$conn->DBQ($query);
			$conn->result->bindParam(':eventId', $Id); 
			$Id = $eventId;
			$conn->DBE();			
		}else{
			echo '<script>//alert("서버오류 (계속 반복 시 관리자에게 문의해주세요)");</script>';
			echo '<script>//history.back();</script>';
			exit;
		}

		}catch(PDOException $e){
			echo "Error: " . $e->getMessage();
			echo '<script>//alert("서버오류 (계속 반복 시 관리자에게 문의해주세요)");</script>';
			echo '<script>//history.back();</script>';
			exit;
		}

		$conn->DBO(); // db객체 해제 (종료)
		echo '<script>//alert("'.$eventId.'");</script>';
		echo '<script>//location.href="../user.php";</script>';
		exit;
	}else{
		echo '<script>//alert("이름을 입력해주세요");</script>';
		echo '<script>//history.back();</script>';
		exit;
	}


--8000 engine server--


</pre>
